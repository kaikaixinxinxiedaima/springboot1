input {
    beats {
        port => 5044
    }

    jdbc {
        # jdbc������λ��
        jdbc_driver_library => "mysql-connector-java-8.0.15.jar"
        # ������
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        # MySQL������Ϣ
        jdbc_connection_string => "jdbc:mysql://192.0.0.101:3306/springboot?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&allowMultiQueries=true"
        #����ʱ��
        jdbc_default_timezone => "Asia/Shanghai"
        # �û���
        jdbc_user => "root"
        # ����
        jdbc_password => "123456"
        # ��ʱ����Ĭ��һ����
        schedule => "* * * * *"
        # ִ�����
        statement => "select * from book where update_time > :sql_last_value and update_time < NOW() order by update_time"
    }
}

output {
    elasticsearch {
        hosts => ["192.0.0.171:9200"]
        index => "book"
        document_id => "%{id}"
    }
}



docker run -p 5044:5044 --name logstash -d \
    -v /root/es-docker-config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf \
     -v /root/es-docker-config/logstash.yml:/usr/share/logstash/config/logstash.yml \
    docker.elastic.co/logstash/logstash:7.4.1



docker cp mysql-connector-java-8.0.15.jar logstash:/usr/share/logstash/logstash-core/lib/jars




curl -H "Content-Type: application/json" -XPUT http://192.0.0.171:9200/book -d '{
                                                "index" : {
                                                    "analysis" : {
                                                        "analyzer" : {
                                                            "default" : {
                                                                "type" : "keyword"
                                                            }
                                                        }
                                                   }
                                                }
                                            }'


curl -H "Content-Type: application/json" -XPUT http://192.0.0.171:9200/book -d '{"settings": {"index.analysis.analyzer.default.type": "ik_max_word"}}










'{
  "settings": {

    "index.analysis.analyzer.default.type": "ik_max_word"

   },
  "mappings": {
    "doc": {
      "properties": {
        "id": {
          "type": "long"
        },

        "bookName": {
          "type": "text",
          "analyzer": "ik_max_word"

        },

        "bookContent": {

          "type": "text",
          "analyzer": "ik_max_word"

        }
      }
    }
  }
}'



cat > /etc/sysctl.d/k8s.conf << EOF
> net.bridge.bridge-nf-call-ip6tables = 1
> net.bridge.beidge-nf-call-iptables = 1
> EOF


# master
kubeadm init --kubernetes-version=1.16.4  \
--apiserver-advertise-address=192.0.0.171   \
--image-repository registry.aliyuncs.com/google_containers  \
--service-cidr=10.1.0.0/16   \
--pod-network-cidr=10.244.0.0/16






    kubeadm join 192.0.0.171:6443 --token j6sq7z.f1e94nlkohfuk413 \
        --discovery-token-ca-cert-hash sha256:9ef84c7bacc1a2cc3f90520e42f7bb633e7f5c33c514939b98f699218dc12d8f



# 测试
kubectl create deployment nginx --image=nginx

kubectl expose deployment nginx --port=80 --type=NodePort



# 查看pod
kubectl get pods --all-namespaces -o wide


















 #卸载docker

 1.查询安装过的包

 yum list installed | grep docker

 docker-engine.x86_64                 17.03.0.ce-1.el7.centos         @dockerrepo



 2.删除安装的软件包

 yum -y remove docker-engine.x86_64



 3.删除镜像/容器等

 rm -rf /var/lib/docker
